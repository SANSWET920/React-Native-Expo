{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\React Native Project\\\\Memes\\\\node_modules\\\\react-native-gifted-chat-new\\\\src\\\\Composer.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { MIN_COMPOSER_HEIGHT, DEFAULT_PLACEHOLDER } from \"./Constant\";\nimport Color from \"./Color\";\n\nvar Composer = function (_React$Component) {\n  _inherits(Composer, _React$Component);\n\n  var _super = _createSuper(Composer);\n\n  function Composer() {\n    _classCallCheck(this, Composer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Composer, [{\n    key: \"onContentSizeChange\",\n    value: function onContentSizeChange(e) {\n      var contentSize = e.nativeEvent.contentSize;\n      if (!contentSize) return;\n\n      if (!this.contentSize || this.contentSize.width !== contentSize.width || this.contentSize.height !== contentSize.height) {\n        this.contentSize = contentSize;\n        this.props.onInputSizeChanged(this.contentSize);\n      }\n    }\n  }, {\n    key: \"onChangeText\",\n    value: function onChangeText(text) {\n      this.props.onTextChanged(text);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(TextInput, _extends({\n        testID: this.props.placeholder,\n        accessible: true,\n        accessibilityLabel: this.props.placeholder,\n        placeholder: this.props.placeholder,\n        placeholderTextColor: this.props.placeholderTextColor,\n        multiline: this.props.multiline,\n        onChange: function onChange(e) {\n          return _this.onContentSizeChange(e);\n        },\n        onContentSizeChange: function onContentSizeChange(e) {\n          return _this.onContentSizeChange(e);\n        },\n        onChangeText: function onChangeText(text) {\n          return _this.onChangeText(text);\n        },\n        style: [styles.textInput, this.props.textInputStyle, {\n          height: this.props.composerHeight\n        }],\n        autoFocus: this.props.textInputAutoFocus,\n        value: this.props.text,\n        enablesReturnKeyAutomatically: true,\n        underlineColorAndroid: \"transparent\",\n        keyboardAppearance: this.props.keyboardAppearance\n      }, this.props.textInputProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return Composer;\n}(React.Component);\n\nexport { Composer as default };\nvar styles = StyleSheet.create({\n  textInput: {\n    flex: 1,\n    marginLeft: 10,\n    fontSize: 16,\n    lineHeight: 16,\n    marginTop: Platform.select({\n      ios: 6,\n      android: 0\n    }),\n    marginBottom: Platform.select({\n      ios: 5,\n      android: 3\n    })\n  }\n});\nComposer.defaultProps = {\n  composerHeight: MIN_COMPOSER_HEIGHT,\n  text: '',\n  placeholderTextColor: Color.defaultProps,\n  placeholder: DEFAULT_PLACEHOLDER,\n  textInputProps: null,\n  multiline: true,\n  textInputStyle: {},\n  textInputAutoFocus: false,\n  keyboardAppearance: 'default',\n  onTextChanged: function onTextChanged() {},\n  onInputSizeChanged: function onInputSizeChanged() {}\n};\nComposer.propTypes = {\n  composerHeight: PropTypes.number,\n  text: PropTypes.string,\n  placeholder: PropTypes.string,\n  placeholderTextColor: PropTypes.string,\n  textInputProps: PropTypes.object,\n  onTextChanged: PropTypes.func,\n  onInputSizeChanged: PropTypes.func,\n  multiline: PropTypes.bool,\n  textInputStyle: TextInput.propTypes.style,\n  textInputAutoFocus: PropTypes.bool,\n  keyboardAppearance: PropTypes.string\n};","map":{"version":3,"sources":["D:/React Native Project/Memes/node_modules/react-native-gifted-chat-new/src/Composer.js"],"names":["PropTypes","React","MIN_COMPOSER_HEIGHT","DEFAULT_PLACEHOLDER","Color","Composer","e","contentSize","nativeEvent","width","height","props","onInputSizeChanged","text","onTextChanged","placeholder","placeholderTextColor","multiline","onContentSizeChange","onChangeText","styles","textInput","textInputStyle","composerHeight","textInputAutoFocus","keyboardAppearance","textInputProps","Component","StyleSheet","create","flex","marginLeft","fontSize","lineHeight","marginTop","Platform","select","ios","android","marginBottom","defaultProps","propTypes","number","string","object","func","bool","TextInput","style"],"mappings":";;;;;;;;;;;;AAEA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAGA,SAASC,mBAAT,EAA8BC,mBAA9B;AACA,OAAOC,KAAP;;IAEqBC,Q;;;;;;;;;;;;;wCAECC,C,EAAG;AAAA,UACbC,WADa,GACGD,CAAC,CAACE,WADL,CACbD,WADa;AAIrB,UAAI,CAACA,WAAL,EAAkB;;AAElB,UACE,CAAC,KAAKA,WAAN,IACA,KAAKA,WAAL,CAAiBE,KAAjB,KAA2BF,WAAW,CAACE,KADvC,IAEA,KAAKF,WAAL,CAAiBG,MAAjB,KAA4BH,WAAW,CAACG,MAH1C,EAIE;AACA,aAAKH,WAAL,GAAmBA,WAAnB;AACA,aAAKI,KAAL,CAAWC,kBAAX,CAA8B,KAAKL,WAAnC;AACD;AACF;;;iCAEYM,I,EAAM;AACjB,WAAKF,KAAL,CAAWG,aAAX,CAAyBD,IAAzB;AACD;;;6BAEQ;AAAA;;AACP,aACE,oBAAC,SAAD;AACE,QAAA,MAAM,EAAE,KAAKF,KAAL,CAAWI,WADrB;AAEE,QAAA,UAAU,MAFZ;AAGE,QAAA,kBAAkB,EAAE,KAAKJ,KAAL,CAAWI,WAHjC;AAIE,QAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWI,WAJ1B;AAKE,QAAA,oBAAoB,EAAE,KAAKJ,KAAL,CAAWK,oBALnC;AAME,QAAA,SAAS,EAAE,KAAKL,KAAL,CAAWM,SANxB;AAOE,QAAA,QAAQ,EAAE,kBAACX,CAAD;AAAA,iBAAO,KAAI,CAACY,mBAAL,CAAyBZ,CAAzB,CAAP;AAAA,SAPZ;AAQE,QAAA,mBAAmB,EAAE,6BAACA,CAAD;AAAA,iBAAO,KAAI,CAACY,mBAAL,CAAyBZ,CAAzB,CAAP;AAAA,SARvB;AASE,QAAA,YAAY,EAAE,sBAACO,IAAD;AAAA,iBAAU,KAAI,CAACM,YAAL,CAAkBN,IAAlB,CAAV;AAAA,SAThB;AAUE,QAAA,KAAK,EAAE,CAACO,MAAM,CAACC,SAAR,EAAmB,KAAKV,KAAL,CAAWW,cAA9B,EAA8C;AAAEZ,UAAAA,MAAM,EAAE,KAAKC,KAAL,CAAWY;AAArB,SAA9C,CAVT;AAWE,QAAA,SAAS,EAAE,KAAKZ,KAAL,CAAWa,kBAXxB;AAYE,QAAA,KAAK,EAAE,KAAKb,KAAL,CAAWE,IAZpB;AAaE,QAAA,6BAA6B,MAb/B;AAcE,QAAA,qBAAqB,EAAC,aAdxB;AAeE,QAAA,kBAAkB,EAAE,KAAKF,KAAL,CAAWc;AAfjC,SAgBM,KAAKd,KAAL,CAAWe,cAhBjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAoBD;;;;EA3CmCzB,KAAK,CAAC0B,S;;SAAvBtB,Q;AA+CrB,IAAMe,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,EAFH;AAGTC,IAAAA,QAAQ,EAAE,EAHD;AAITC,IAAAA,UAAU,EAAE,EAJH;AAKTC,IAAAA,SAAS,EAAEC,QAAQ,CAACC,MAAT,CAAgB;AACzBC,MAAAA,GAAG,EAAE,CADoB;AAEzBC,MAAAA,OAAO,EAAE;AAFgB,KAAhB,CALF;AASTC,IAAAA,YAAY,EAAEJ,QAAQ,CAACC,MAAT,CAAgB;AAC5BC,MAAAA,GAAG,EAAE,CADuB;AAE5BC,MAAAA,OAAO,EAAE;AAFmB,KAAhB;AATL;AADoB,CAAlB,CAAf;AAiBAjC,QAAQ,CAACmC,YAAT,GAAwB;AACtBjB,EAAAA,cAAc,EAAErB,mBADM;AAEtBW,EAAAA,IAAI,EAAE,EAFgB;AAGtBG,EAAAA,oBAAoB,EAAEZ,KAAK,CAACoC,YAHN;AAItBzB,EAAAA,WAAW,EAAEZ,mBAJS;AAKtBuB,EAAAA,cAAc,EAAE,IALM;AAMtBT,EAAAA,SAAS,EAAE,IANW;AAOtBK,EAAAA,cAAc,EAAE,EAPM;AAQtBE,EAAAA,kBAAkB,EAAE,KARE;AAStBC,EAAAA,kBAAkB,EAAE,SATE;AAUtBX,EAAAA,aAAa,EAAE,yBAAM,CAAE,CAVD;AAWtBF,EAAAA,kBAAkB,EAAE,8BAAM,CAAE;AAXN,CAAxB;AAcAP,QAAQ,CAACoC,SAAT,GAAqB;AACnBlB,EAAAA,cAAc,EAAEvB,SAAS,CAAC0C,MADP;AAEnB7B,EAAAA,IAAI,EAAEb,SAAS,CAAC2C,MAFG;AAGnB5B,EAAAA,WAAW,EAAEf,SAAS,CAAC2C,MAHJ;AAInB3B,EAAAA,oBAAoB,EAAEhB,SAAS,CAAC2C,MAJb;AAKnBjB,EAAAA,cAAc,EAAE1B,SAAS,CAAC4C,MALP;AAMnB9B,EAAAA,aAAa,EAAEd,SAAS,CAAC6C,IANN;AAOnBjC,EAAAA,kBAAkB,EAAEZ,SAAS,CAAC6C,IAPX;AAQnB5B,EAAAA,SAAS,EAAEjB,SAAS,CAAC8C,IARF;AASnBxB,EAAAA,cAAc,EAAEyB,SAAS,CAACN,SAAV,CAAoBO,KATjB;AAUnBxB,EAAAA,kBAAkB,EAAExB,SAAS,CAAC8C,IAVX;AAWnBrB,EAAAA,kBAAkB,EAAEzB,SAAS,CAAC2C;AAXX,CAArB","sourcesContent":["/* eslint no-use-before-define: [\"error\", { \"variables\": false }] */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Platform, StyleSheet, TextInput } from 'react-native';\n\nimport { MIN_COMPOSER_HEIGHT, DEFAULT_PLACEHOLDER } from './Constant';\nimport Color from './Color';\n\nexport default class Composer extends React.Component {\n\n  onContentSizeChange(e) {\n    const { contentSize } = e.nativeEvent;\n\n    // Support earlier versions of React Native on Android.\n    if (!contentSize) return;\n\n    if (\n      !this.contentSize ||\n      this.contentSize.width !== contentSize.width ||\n      this.contentSize.height !== contentSize.height\n    ) {\n      this.contentSize = contentSize;\n      this.props.onInputSizeChanged(this.contentSize);\n    }\n  }\n\n  onChangeText(text) {\n    this.props.onTextChanged(text);\n  }\n\n  render() {\n    return (\n      <TextInput\n        testID={this.props.placeholder}\n        accessible\n        accessibilityLabel={this.props.placeholder}\n        placeholder={this.props.placeholder}\n        placeholderTextColor={this.props.placeholderTextColor}\n        multiline={this.props.multiline}\n        onChange={(e) => this.onContentSizeChange(e)}\n        onContentSizeChange={(e) => this.onContentSizeChange(e)}\n        onChangeText={(text) => this.onChangeText(text)}\n        style={[styles.textInput, this.props.textInputStyle, { height: this.props.composerHeight }]}\n        autoFocus={this.props.textInputAutoFocus}\n        value={this.props.text}\n        enablesReturnKeyAutomatically\n        underlineColorAndroid=\"transparent\"\n        keyboardAppearance={this.props.keyboardAppearance}\n        {...this.props.textInputProps}\n      />\n    );\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  textInput: {\n    flex: 1,\n    marginLeft: 10,\n    fontSize: 16,\n    lineHeight: 16,\n    marginTop: Platform.select({\n      ios: 6,\n      android: 0,\n    }),\n    marginBottom: Platform.select({\n      ios: 5,\n      android: 3,\n    }),\n  },\n});\n\nComposer.defaultProps = {\n  composerHeight: MIN_COMPOSER_HEIGHT,\n  text: '',\n  placeholderTextColor: Color.defaultProps,\n  placeholder: DEFAULT_PLACEHOLDER,\n  textInputProps: null,\n  multiline: true,\n  textInputStyle: {},\n  textInputAutoFocus: false,\n  keyboardAppearance: 'default',\n  onTextChanged: () => {},\n  onInputSizeChanged: () => {},\n};\n\nComposer.propTypes = {\n  composerHeight: PropTypes.number,\n  text: PropTypes.string,\n  placeholder: PropTypes.string,\n  placeholderTextColor: PropTypes.string,\n  textInputProps: PropTypes.object,\n  onTextChanged: PropTypes.func,\n  onInputSizeChanged: PropTypes.func,\n  multiline: PropTypes.bool,\n  textInputStyle: TextInput.propTypes.style,\n  textInputAutoFocus: PropTypes.bool,\n  keyboardAppearance: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}