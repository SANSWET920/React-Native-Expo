{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { BottomNavigation, DefaultTheme, DarkTheme } from 'react-native-paper';\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { NavigationHelpersContext, TabActions, useTheme, useLinkBuilder, Link } from '@react-navigation/native';\n\nfunction MaterialBottomTabViewInner(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      rest = _objectWithoutProperties(_ref, [\"state\", \"navigation\", \"descriptors\"]);\n\n  var _useTheme = useTheme(),\n      dark = _useTheme.dark,\n      colors = _useTheme.colors;\n\n  var buildLink = useLinkBuilder();\n  var theme = React.useMemo(function () {\n    var t = dark ? DarkTheme : DefaultTheme;\n    return _objectSpread(_objectSpread({}, t), {}, {\n      colors: _objectSpread(_objectSpread(_objectSpread({}, t.colors), colors), {}, {\n        surface: colors.card\n      })\n    });\n  }, [colors, dark]);\n  return React.createElement(BottomNavigation, _extends({}, rest, {\n    theme: theme,\n    navigationState: state,\n    onIndexChange: function onIndexChange(index) {\n      return navigation.dispatch(_objectSpread(_objectSpread({}, TabActions.jumpTo(state.routes[index].name)), {}, {\n        target: state.key\n      }));\n    },\n    renderScene: function renderScene(_ref3) {\n      var route = _ref3.route;\n      return descriptors[route.key].render();\n    },\n    renderTouchable: Platform.OS === 'web' ? function (_ref2) {\n      var _onPress = _ref2.onPress,\n          route = _ref2.route,\n          _0 = _ref2.accessibilityRole,\n          _1 = _ref2.borderless,\n          _2 = _ref2.centered,\n          _3 = _ref2.rippleColor,\n          rest = _objectWithoutProperties(_ref2, [\"onPress\", \"route\", \"accessibilityRole\", \"borderless\", \"centered\", \"rippleColor\"]);\n\n      return React.createElement(Link, _extends({}, rest, {\n        to: buildLink(route.name, route.params),\n        accessibilityRole: \"link\",\n        onPress: function onPress(e) {\n          if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n              e.preventDefault();\n              _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n            }\n        }\n      }));\n    } : undefined,\n    renderIcon: function renderIcon(_ref4) {\n      var route = _ref4.route,\n          focused = _ref4.focused,\n          color = _ref4.color;\n      var options = descriptors[route.key].options;\n\n      if (typeof options.tabBarIcon === 'string') {\n        return React.createElement(MaterialCommunityIcons, {\n          name: options.tabBarIcon,\n          color: color,\n          size: 24,\n          style: styles.icon\n        });\n      }\n\n      if (typeof options.tabBarIcon === 'function') {\n        return options.tabBarIcon({\n          focused: focused,\n          color: color\n        });\n      }\n\n      return null;\n    },\n    getLabelText: function getLabelText(_ref5) {\n      var route = _ref5.route;\n      var options = descriptors[route.key].options;\n      return options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    },\n    getColor: function getColor(_ref6) {\n      var route = _ref6.route;\n      return descriptors[route.key].options.tabBarColor;\n    },\n    getBadge: function getBadge(_ref7) {\n      var route = _ref7.route;\n      return descriptors[route.key].options.tabBarBadge;\n    },\n    getAccessibilityLabel: function getAccessibilityLabel(_ref8) {\n      var route = _ref8.route;\n      return descriptors[route.key].options.tabBarAccessibilityLabel;\n    },\n    getTestID: function getTestID(_ref9) {\n      var route = _ref9.route;\n      return descriptors[route.key].options.tabBarTestID;\n    },\n    onTabPress: function onTabPress(_ref10) {\n      var route = _ref10.route,\n          preventDefault = _ref10.preventDefault;\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (event.defaultPrevented) {\n        preventDefault();\n      }\n    }\n  }));\n}\n\nexport default function MaterialBottomTabView(props) {\n  return React.createElement(NavigationHelpersContext.Provider, {\n    value: props.navigation\n  }, React.createElement(MaterialBottomTabViewInner, props));\n}\nvar styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["MaterialBottomTabView.tsx"],"names":["descriptors","rest","colors","useTheme","buildLink","useLinkBuilder","theme","t","dark","surface","card","index","TabActions","state","target","key","route","onPress","accessibilityRole","borderless","centered","rippleColor","_3","e","color","options","styles","icon","focused","preventDefault","event","type","canPreventDefault","props","navigation","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform } from 'react-native';\nimport { BottomNavigation, DefaultTheme, DarkTheme } from 'react-native-paper';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\nimport {\n  NavigationHelpersContext,\n  Route,\n  TabNavigationState,\n  TabActions,\n  useTheme,\n  useLinkBuilder,\n  Link,\n} from '@react-navigation/native';\n\nimport {\n  MaterialBottomTabDescriptorMap,\n  MaterialBottomTabNavigationConfig,\n  MaterialBottomTabNavigationHelpers,\n} from '../types';\n\ntype Props = MaterialBottomTabNavigationConfig & {\n  state: TabNavigationState;\n  navigation: MaterialBottomTabNavigationHelpers;\n  descriptors: MaterialBottomTabDescriptorMap;\n};\n\ntype Scene = { route: { key: string } };\n\nfunction MaterialBottomTabViewInner({\n  state,\n  navigation,\n  descriptors,\n  ...rest\n}: Props) {\n  const { dark, colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const theme = React.useMemo(() => {\n    const t = dark ? DarkTheme : DefaultTheme;\n\n    return {\n      ...t,\n      colors: {\n        ...t.colors,\n        ...colors,\n        surface: colors.card,\n      },\n    };\n  }, [colors, dark]);\n\n  return (\n    <BottomNavigation\n      {...rest}\n      theme={theme}\n      navigationState={state}\n      onIndexChange={(index: number) =>\n        navigation.dispatch({\n          ...TabActions.jumpTo(state.routes[index].name),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      renderTouchable={\n        Platform.OS === 'web'\n          ? ({\n              onPress,\n              route,\n              accessibilityRole: _0,\n              borderless: _1,\n              centered: _2,\n              rippleColor: _3,\n              ...rest\n            }) => {\n              return (\n                <Link\n                  {...rest}\n                  // @ts-ignore\n                  to={buildLink(route.name, route.params)}\n                  accessibilityRole=\"link\"\n                  onPress={(e: any) => {\n                    if (\n                      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n                      (e.button == null || e.button === 0) // ignore everything but left clicks\n                    ) {\n                      e.preventDefault();\n                      onPress?.(e);\n                    }\n                  }}\n                />\n              );\n            }\n          : undefined\n      }\n      renderIcon={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (typeof options.tabBarIcon === 'string') {\n          return (\n            <MaterialCommunityIcons\n              name={options.tabBarIcon}\n              color={color}\n              size={24}\n              style={styles.icon}\n            />\n          );\n        }\n\n        if (typeof options.tabBarIcon === 'function') {\n          return options.tabBarIcon({ focused, color });\n        }\n\n        return null;\n      }}\n      getLabelText={({ route }: Scene) => {\n        const { options } = descriptors[route.key];\n\n        return options.tabBarLabel !== undefined\n          ? options.tabBarLabel\n          : options.title !== undefined\n          ? options.title\n          : (route as Route<string>).name;\n      }}\n      getColor={({ route }) => descriptors[route.key].options.tabBarColor}\n      getBadge={({ route }) => descriptors[route.key].options.tabBarBadge}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n    />\n  );\n}\n\nexport default function MaterialBottomTabView(props: Props) {\n  return (\n    <NavigationHelpersContext.Provider value={props.navigation}>\n      <MaterialBottomTabViewInner {...props} />\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}